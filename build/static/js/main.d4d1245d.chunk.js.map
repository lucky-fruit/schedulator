{"version":3,"sources":["components/TimeDisplay.js","components/TypeSelect.js","components/Controls.js","components/Task.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["TimeDisplay","time","status","selected","className","Grid","container","direction","alignItems","item","name","formatDisplay","minutes","Math","floor","seconds","mdisplay","sdisplay","formatTime","TypeSelect","types","changeType","spacing","map","type","index","Button","variant","size","onClick","color","Controls","start","reset","pause","useStyles","makeStyles","theme","root","display","flexWrap","textField","marginLeft","marginRight","width","Task","classes","useState","tasks","setTasks","newTask","setNewTask","saveData","newTasks","localStorage","setItem","JSON","stringify","useEffect","getItem","parse","xs","sm","trim","task","id","Date","now","startIcon","Input","placeholder","value","onChange","e","target","Box","paddingTop","justify","style","listStyleType","filter","deleteTask","endIcon","DeleteOutlined","alignContent","createMuiTheme","overrides","MuiCssBaseline","body","background","backgroundRepeat","backgroundAttachment","typography","fontFamily","palette","primary","main","secondary","text","App","props","stopInterval","clearInterval","state","interval","setState","startTimer","setInterval","tick","running","selectedType","resetTimer","pauseTimer","getStatus","this","CssBaseline","Container","maxWidth","Component","defaultProps","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d4d1245d.chunk.js","sourcesContent":["import React from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst TimeDisplay = ({ time, status, selected }) => {\r\n    function formatTime(time) {\r\n        const minutes = Math.floor(time / 60);\r\n        const seconds = Math.floor(time % 60);\r\n        const mdisplay = (minutes > 9 ? minutes : `0${minutes}`)\r\n        const sdisplay = (seconds > 9 ? seconds : `0${seconds}`)\r\n\r\n        return `${mdisplay}:${sdisplay}`;\r\n    }\r\n\r\n    function formatDisplay(name, status) {\r\n        if (status) {\r\n            return `${name} IS ${status}`\r\n        } else {\r\n            return (name === 'WORK' ? `TIME FOR WORK!` : `TIME FOR A BREAK`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"time-display\">\r\n            <Grid container direction=\"column-reverse\" alignItems=\"center\">\r\n                <Grid item>\r\n                    <h5>{formatDisplay(selected.name, status)}</h5>\r\n                </Grid><Grid item>\r\n                    <h1>{formatTime(time)}</h1>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimeDisplay","import React from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nconst TypeSelect = ({ types, changeType, selected }) => (\r\n    <div className=\"type-select\">\r\n        <Grid container spacing={5} direction=\"row\"> \r\n        {types.map((type, index) => (\r\n            <Grid item key={type.name}>\r\n            <Button variant=\"contained\"\r\n                size = \"small\"\r\n                key={type.name}\r\n                onClick={() => changeType(type)}\r\n                className={type.name === selected.name ? 'active' : ''}\r\n                color={type.name === selected.name ? 'secondary' : 'primary'}\r\n            >\r\n                {type.name}\r\n            </Button>\r\n            </Grid>\r\n        ))}\r\n        </Grid>\r\n    </div>\r\n\r\n);\r\n\r\nexport default TypeSelect","import React from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport PlayCircleFilledOutlinedIcon from '@material-ui/icons/PlayCircleFilledOutlined';\r\nimport ReplayOutlinedIcon from '@material-ui/icons/ReplayOutlined';\r\nimport PauseCircleFilledOutlinedIcon from '@material-ui/icons/PauseCircleFilledOutlined';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nconst Controls = ({ start, reset, pause, status }) => (\r\n\r\n    <div className=\"controls\">\r\n\r\n        {!status && (\r\n            <Button onClick={start} className=\"start\" variant=\"text\" size=\"large\">\r\n                <PlayCircleFilledOutlinedIcon />\r\n            </Button>\r\n        )}\r\n\r\n\r\n        {status === 'DONE' && (\r\n            <Button onClick={start} className=\"start\" variant=\"text\" size=\"large\">\r\n                <ReplayOutlinedIcon />\r\n            </Button>\r\n        )}\r\n\r\n        <Grid container spacing={10} >\r\n            <Grid item>\r\n                {(status === 'PAUSED' || status === 'ONGOING') && (\r\n                    <div>\r\n                        <Button onClick={pause} className={status === 'PAUSED' ? 'resume' : 'pause'} variant=\"text\" size=\"large\">\r\n                            {(status === 'paused') ? <PlayCircleFilledOutlinedIcon /> : <PauseCircleFilledOutlinedIcon />}\r\n                        </Button>\r\n                        <Button onClick={reset} className='reset' variant=\"text\" size=\"large\">\r\n                            <ReplayOutlinedIcon />\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n            </Grid>\r\n\r\n\r\n        </Grid>\r\n    </div>\r\n)\r\n\r\nexport default Controls","import React, { useState, useEffect } from 'react'\r\nimport { Button, Input } from '@material-ui/core';\r\nimport { DeleteOutlined } from '@material-ui/icons'\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: '25ch',\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction Task() {\r\n    const classes = useStyles();\r\n    const [tasks, setTasks] = useState([]);\r\n    const [newTask, setNewTask] = useState(\"\");\r\n\r\n\r\n\r\n    const saveData = (newTasks) => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(newTasks))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"tasks\")) {\r\n            setTasks(JSON.parse(localStorage.getItem(\"tasks\")));\r\n        }\r\n    }, []);\r\n\r\n\r\n    const onAddTask = () => {\r\n        if (newTask.trim()) {\r\n            let newTasks = [...tasks, { task: newTask.trim(), id: Date.now() }];\r\n            setTasks(newTasks);\r\n            setNewTask(\"\");\r\n            saveData(newTasks);\r\n        }\r\n    }\r\n\r\n    const deleteTask = (id) => {\r\n        let newTasks = tasks.filter((task) => task.id !== id)\r\n        setTasks(newTasks);\r\n        saveData(newTasks);\r\n    }\r\n\r\n\r\n\r\n    // onAddTask: checks if newTask has changed, adds a task to the tasks, sets NewTask back to empty, then saves data\r\n    // deleteTask: filters and only takes tasks without the id of the selected, which removes the task\r\n    return (\r\n        <div className='container-tasklist'>\r\n\r\n            <Grid container spacing={10} direction=\"row\">\r\n                <Grid item xs={2} sm={1}>\r\n                    <Button onClick={onAddTask} startIcon={<AddCircleOutlineOutlinedIcon />}>\r\n                        ADD\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <Input\r\n                        type=\"text\"\r\n                        id=\"taskInput\"\r\n                        className={classes.textField}\r\n                        placeholder=\"Add a task here\"\r\n                        value={newTask}\r\n                        onChange={(e) => setNewTask(e.target.value)}\r\n                        variant=\"contained\"\r\n                        size=\"normal\"\r\n                        color=\"secondary\"\r\n                    />\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n\r\n            <Box paddingTop={3}>\r\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"stretch\">\r\n                    {tasks.map((task) => (\r\n                        <p style={{ listStyleType: 'none' }} key={task.id}>\r\n                            <Grid container item direction=\"row\" justify=\"space-evenly\" alignItems=\"center\">\r\n                                <Grid item xs={2}>\r\n                                    <Button size=\"small\"\r\n                                        className='delete'\r\n                                        onClick={() => deleteTask(task.id)}\r\n                                        endIcon={<DeleteOutlined />}\r\n                                        color=\"secondary\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={8} alignContent=\"center\">\r\n                                    {task.task}\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </p>\r\n                    ))}\r\n                </Grid>\r\n            </Box>\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Task;","import { Component } from 'react';\r\nimport './App.css';\r\nimport TimeDisplay from './components/TimeDisplay';\r\nimport TypeSelect from './components/TypeSelect';\r\nimport Controls from './components/Controls'\r\nimport Task from './components/Task'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Container from '@material-ui/core/Container'\r\nimport Box from '@material-ui/core/Box'\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiCssBaseline: {\r\n      '@global': {\r\n        body: {\r\n          background: 'linear-gradient(45deg, #66cccc 30%, #ff8e53 60%)',\r\n           backgroundRepeat: \"no-repeat\",\r\n           backgroundAttachment: \"fixed\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  typography :{\r\n    fontFamily: \"Roboto Mono, Montserrat, Roboto\",\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: \"#66cc99\"\r\n    },\r\n    secondary: {\r\n      main: \"#cc6666\"\r\n    },\r\n    text: {\r\n      primary: \"#eff9f9\",\r\n      secondary: \"#cecbcb\",\r\n    },\r\n  }\r\n});\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedType: props.types[0],\r\n      time: props.types[0].time,\r\n      interval: null,\r\n      running: false,\r\n    }\r\n  }\r\n\r\n  static defaultProps = {\r\n    types: [\r\n      { name: 'WORK', time: 1500 },\r\n      { name: 'SHORT REST', time: 300 },\r\n      { name: 'LONG REST', time: 900 }\r\n    ]\r\n  };\r\n\r\n\r\n  stopInterval = () => {\r\n    clearInterval(this.state.interval);\r\n    this.setState({ interval: null })\r\n  }\r\n\r\n  startTimer = () => {\r\n    const interval = setInterval(this.tick, 1000)\r\n    this.setState(state => ({\r\n      running: true,\r\n      interval,\r\n      time: state.time > 0 ? state.time : state.selectedType.time\r\n    }));\r\n  }\r\n\r\n  resetTimer = () => {\r\n    this.stopInterval();\r\n    this.setState(state => ({\r\n      time: state.selectedType.time,\r\n      running: false,\r\n    }))\r\n  }\r\n\r\n  pauseTimer = () => {\r\n    this.state.interval ? this.stopInterval() : this.startTimer();\r\n  }\r\n\r\n  getStatus = () => {\r\n    const { time, running, interval } = this.state;\r\n    if (time === 0) return 'DONE';\r\n    if (running && !interval) return 'PAUSED';\r\n    if (running) return 'ONGOING';\r\n  }\r\n\r\n  changeType = type => {\r\n    this.resetTimer();\r\n    this.setState({ selectedType: type, time: type.time, running: false });\r\n  };\r\n\r\n  tick = () => {\r\n    if (this.state.time <= 1) {\r\n      this.stopInterval();\r\n      this.setState({ running: false });\r\n    }\r\n    this.setState(state => ({ time: state.time - 1 }))\r\n  };\r\n\r\n\r\n\r\n  // tick (running the clock), stopInterval (clearing interval)\r\n  // startTimer, pauseTimer, resetTimer\r\n  // getStatus (finished, running, paused), changeType (toggle bet. work and rests)\r\n\r\n  render() {\r\n\r\n    const { time, selectedType } = this.state\r\n    const { types } = this.props\r\n\r\n    return (\r\n\r\n      <MuiThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n\r\n        <div className=\"app-container\">\r\n          <Container maxWidth=\"lg\">\r\n\r\n            <Box paddingTop={10}>\r\n\r\n              <Grid container justify=\"space-evenly\" alignItems=\"stretch\" direction=\"row\" >\r\n\r\n                <Grid container item xs={6} sm={3} direction=\"column\" spacing={2} alignItems=\"center\" alignContent=\"center\">\r\n                  <Grid item>\r\n                    <h1>TASKLIST</h1>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Task />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n\r\n                <Grid container item xs={8} sm={5} direction=\"column\" spacing={4} alignItems=\"center\" alignContent=\"center\">\r\n                  <Grid item >\r\n                    <h1>TIMER</h1>\r\n                  </Grid>\r\n                  <Grid item>\r\n\r\n                    <TypeSelect\r\n                      types={types}\r\n                      changeType={this.changeType}\r\n                      selected={selectedType}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n\r\n                    <TimeDisplay\r\n                      time={time}\r\n                      status={this.getStatus()}\r\n                      selected={selectedType}\r\n                    />\r\n\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Controls\r\n                      start={this.startTimer}\r\n                      reset={this.resetTimer}\r\n                      pause={this.pauseTimer}\r\n                      status={this.getStatus()}\r\n                    />\r\n                  </Grid>\r\n\r\n                </Grid>\r\n\r\n              </Grid>\r\n            </Box>\r\n          </Container>\r\n\r\n        </div>\r\n\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(<App />, document.getElementById('root') \r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}